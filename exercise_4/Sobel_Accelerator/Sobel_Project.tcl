#
# Vivado (TM) v2016.1 (64-bit)
#
# Sobel_Project.tcl: Tcl script for re-creating project 'Sobel_Project'
#
# Generated by Vivado on Tue May 17 15:12:34 CEST 2016
# IP Build 1537824 on Fri Apr  8 04:28:57 MDT 2016
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (Sobel_Project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "./src/top_system.vhd"
#    "./src/sobel_top_system.vhd"
#    "./src/processing_unit.vhd"
#    "./src/pipe_control_logic.vhd"
#    "./src/tb_processing_unit.vhd"
#    "./src/smbus.v"
#    "./src/i2s_audio.v"
#    "./src/xillybus.v"
#    "./src/xillybus_core.v"
#    "./Sobel_Project_Base/vivado-essentials/system.v"
#    "./Sobel_Project_Base/vivado-essentials/vga_fifo/vga_fifo.xci"
#    "./Sobel_Project_Base/vivado-essentials/fifo_8x2048/fifo_8x2048.xci"
#    "./Sobel_Project_Base/vivado-essentials/fifo_32x512/fifo_32x512.xci"
#    "./Sobel_Project_Base/vivado-essentials/shift_ram/shift_ram.xci"
#    "./Sobel_Project_Base/vivado-essentials/vivado_system/vivado_system.bd"
#    "./Sobel_Project_Base/vivado-essentials/top_system.xdc"
#    "./Sobel_Project.wcfg"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir [file dirname [info script]]

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
	set origin_dir $::origin_dir_loc
}

if {[string first { } $origin_dir] >= 0} {
	send_msg_id Sobel_Project-1 error "The path to the the project directory contains white space(s): \"$origin_dir\". This is known to cause problems with Vivado. Please move the project to a path without white spaces, and try again."
}

variable script_file
set script_file "Sobel_Project.tcl"

# Help information for this script
proc help {} {
	variable script_file
	puts "\nDescription:"
	puts "Recreate a Vivado project from this script. The created project will be"
	puts "functionally equivalent to the original project for which this script was"
	puts "generated. The script contains commands for creating a project, filesets,"
	puts "runs, adding/importing sources and setting properties on various objects.\n"
	puts "Syntax:"
	puts "$script_file"
	puts "$script_file -tclargs \[--origin_dir <path>\]"
	puts "$script_file -tclargs \[--help\]\n"
	puts "Usage:"
	puts "Name                   Description"
	puts "-------------------------------------------------------------------------"
	puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
	puts "                       origin_dir path value is \".\", otherwise, the value"
	puts "                       that was set with the \"-paths_relative_to\" switch"
	puts "                       when this script was generated.\n"
	puts "\[--help\]               Print help information for this script"
	puts "-------------------------------------------------------------------------\n"
	exit 0
}

if { $::argc > 0 } {
	for {set i 0} {$i < [llength $::argc]} {incr i} {
		set option [string trim [lindex $::argv $i]]
		switch -regexp -- $option {
			"--origin_dir" { incr i; set origin_dir [lindex $::argv $i] }
			"--help"       { help }
			default {
				if { [regexp {^-} $option] } {
					puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
					return 1
				}
			}
		}
	}
}

# Set the directory for essentials for Vivado
set essentials_dir [file normalize "$origin_dir/Sobel_Project_Base/vivado-essentials"]

set proj_name Sobel_Project
set proj_dir "[file normalize $origin_dir/vivado_temp]"
set thepart "xc7z020clg484-1"

# Create project
create_project $proj_name "$proj_dir/" -part $thepart

# Set project properties
set obj [get_projects $proj_name]
set_property "default_lib" "xil_defaultlib" $obj
set_property "part" $thepart $obj
set_property "simulator_language" "Mixed" $obj
set_property "source_mgmt_mode" "DisplayOnly" $obj
set_property "target_language" "VHDL" $obj
set_property "ip_repo_paths" "$essentials_dir/vivado-ip" $obj
update_ip_catalog -rebuild

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
	create_fileset -srcset sources_1
}

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$essentials_dir/vivado-ip"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Add files to 'sources_1' fileset
set obj [get_filesets sources_1]
set files [list \
	"[file normalize "$origin_dir/src/top_system.vhd"]"\
	"[file normalize "$origin_dir/src/sobel_top_system.vhd"]"\
	"[file normalize "$origin_dir/src/processing_unit.vhd"]"\
	"[file normalize "$origin_dir/src/pipe_control_logic.vhd"]"\
	"[file normalize "$origin_dir/src/tb_processing_unit.vhd"]"\
	"[file normalize "$origin_dir/src/smbus.v"]"\
	"[file normalize "$origin_dir/src/i2s_audio.v"]"\
	"[file normalize "$origin_dir/src/xillybus.v"]"\
	"[file normalize "$origin_dir/src/xillybus_core.v"]"\
	"[file normalize "$essentials_dir/system.v"]"\
	"[file normalize "$essentials_dir/vga_fifo/vga_fifo.xci"]"\
	"[file normalize "$essentials_dir/fifo_8x2048/fifo_8x2048.xci"]"\
	"[file normalize "$essentials_dir/fifo_32x512/fifo_32x512.xci"]"\
	"[file normalize "$essentials_dir/shift_ram/shift_ram.xci"]"\
	"[file normalize "$essentials_dir/vivado_system/vivado_system.bd"]"\
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/src/top_system.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property "file_type" "VHDL" $file_obj

set file "$origin_dir/src/sobel_top_system.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property "file_type" "VHDL" $file_obj

set file "$origin_dir/src/processing_unit.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property "file_type" "VHDL" $file_obj

set file "$origin_dir/src/pipe_control_logic.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property "file_type" "VHDL" $file_obj

set file "$origin_dir/src/tb_processing_unit.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property "file_type" "VHDL" $file_obj
set_property "used_in" "simulation" $file_obj
set_property "used_in_synthesis" "0" $file_obj

set file "$essentials_dir/vivado_system/vivado_system.bd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
if { ![get_property "is_locked" $file_obj] } {
	set_property "generate_synth_checkpoint" "0" $file_obj
}

upgrade_ip [get_ips]

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property "edif_extra_search_paths" "[file normalize "$origin_dir/Sobel_Project_Base/cores"]" $obj
set_property "top" "top_system" $obj

# A bug in Vivado drops one slave interface on the AXI4-Lite to AXI3
# crossbar when vivado_system.bd is loaded. So AXI4-Lite slaves are
# connected with the Tcl commands below.

open_bd_design $essentials_dir/vivado_system/vivado_system.bd
startgroup
apply_bd_automation -rule xilinx.com:bd_rule:axi4 -config {Master "/processing_system7_0/M_AXI_GP0" Clk "Auto" }  [get_bd_intf_pins xillybus_ip_0/S_AXI]
apply_bd_automation -rule xilinx.com:bd_rule:axi4 -config {Master "/processing_system7_0/M_AXI_GP0" Clk "Auto" }  [get_bd_intf_pins xillyvga_0/S_AXI]
apply_bd_automation -rule xilinx.com:bd_rule:axi4 -config {Master "/processing_system7_0/M_AXI_GP0" Clk "Auto" }  [get_bd_intf_pins xillybus_lite_0/S_AXI]
set_property range 4K [get_bd_addr_segs {processing_system7_0/Data/SEG_xillybus_ip_0_reg0}]
set_property range 4K [get_bd_addr_segs {processing_system7_0/Data/SEG_xillyvga_0_reg0}]
set_property range 4K [get_bd_addr_segs {processing_system7_0/Data/SEG_xillybus_lite_0_reg0}]
set_property offset 0x50000000 [get_bd_addr_segs {processing_system7_0/Data/SEG_xillybus_ip_0_reg0}]
set_property offset 0x50001000 [get_bd_addr_segs {processing_system7_0/Data/SEG_xillyvga_0_reg0}]
set_property offset 0x50002000 [get_bd_addr_segs {processing_system7_0/Data/SEG_xillybus_lite_0_reg0}]
endgroup
save_bd_design
close_bd_design vivado_system

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
	create_fileset -constrset constrs_1
}

# Add files to 'constrs_1' fileset
set obj [get_filesets constrs_1]
add_files -fileset $obj -norecurse $essentials_dir/top_system.xdc
set file "$essentials_dir/top_system.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property "file_type" "XDC" $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property "target_constrs_file" "[file normalize "$essentials_dir/top_system.xdc"]" $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
	create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
	"[file normalize "$origin_dir/src/tb_processing_unit.vhd"]"\
	"[file normalize "$origin_dir/src/processing_unit.vhd"]"\
	"[file normalize "$origin_dir/Sobel_Project.wcfg"]"\
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/src/tb_processing_unit.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property "file_type" "VHDL" $file_obj

set file "$origin_dir/src/processing_unit.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property "file_type" "VHDL" $file_obj

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property "runtime" "173 us" $obj
set_property "source_set" "" $obj
set_property "top" "tb_processing_unit" $obj
set_property "transport_int_delay" "0" $obj
set_property "transport_path_delay" "0" $obj
set_property "unit_under_test" "UUT" $obj
set_property "xelab.nosort" "1" $obj
set_property "xelab.unifast" "" $obj
set_property "xsim.simulate.runtime" "173 us" $obj
set_property "xsim.simulate.uut" "UUT" $obj
set_property "xsim.view" "[file normalize "$origin_dir/$proj_name.wcfg"]" $obj

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
	create_run -name synth_1 -part $thepart -flow {Vivado Synthesis 2016} -strategy "Vivado Synthesis Defaults" -constrset constrs_1
} else {
	set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
	set_property flow "Vivado Synthesis 2016" [get_runs synth_1]
}

set obj [get_runs synth_1]
set_property "constrset" "constrs_1" $obj
set_property "part" $thepart $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
	create_run -name impl_1 -part $thepart -flow {Vivado Implementation 2016} -strategy "Vivado Implementation Defaults" -constrset constrs_1 -parent_run synth_1
} else {
	set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
	set_property flow "Vivado Implementation 2016" [get_runs impl_1]
}

set obj [get_runs impl_1]
set_property "constrset" "constrs_1" $obj
set_property "part" $thepart $obj
set_property "steps.write_bitstream.tcl.pre" "[file normalize "$essentials_dir/showstopper.tcl"]" $obj

# Calm down critical warnings for issues that are known to be OK
set_msg_config  -ruleid {1}  -id {BD 41-968}  -string {{xillybus_M_AXI}}  -new_severity {INFO}  -source 2
set_msg_config  -ruleid {2}  -id {BD 41-968}  -string {{xillybus_S_AXI}}  -new_severity {INFO}  -source 2
set_msg_config  -ruleid {3}  -id {BD 41-967}  -string {{xillybus_ip_0/xillybus_M_AXI}}  -new_severity {INFO}  -source 2
set_msg_config  -ruleid {4}  -id {BD 41-967}  -string {{xillybus_ip_0/xillybus_S_AXI}}  -new_severity {INFO}  -source 2
set_msg_config  -ruleid {5}  -id {BD 41-678}  -string {{xillybus_S_AXI/Reg}}  -new_severity {INFO}  -source 2
set_msg_config  -ruleid {6}  -id {BD 41-1356}  -string {{xillybus_S_AXI/Reg}}  -new_severity {INFO}  -source 2
set_msg_config  -ruleid {7}  -id {BD 41-759}  -string {{xlconcat_0/In}}  -new_severity {INFO}  -source 2

# The processor's native pads are detached in the logic design to prevent
# Vivado from confusing itself. This causes a lot of critical warnings about
# meaningless contraints not being applied. So drop the warnings.
set_msg_config  -ruleid {8}  -id {Netlist 29-160}  -string {{vivado_system_processing_system7}}  -new_severity {INFO}  -source 2

puts "INFO: Project created: $proj_name"

# set the current impl run
current_run -implementation [get_runs impl_1]

# Uncomment the two following lines for a full implementation
#launch_runs -jobs 8 impl_1 -to_step write_bitstream
#wait_on_run impl_1

